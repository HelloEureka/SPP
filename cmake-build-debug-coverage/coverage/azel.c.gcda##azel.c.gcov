        -:    0:Source:/media/eureka/eureka/GNSS Algorithm/SPP/azel.c
        -:    0:Graph:/media/eureka/eureka/GNSS Algorithm/SPP/cmake-build-debug-coverage/CMakeFiles/SPP.dir/azel.c.gcno
        -:    0:Data:/media/eureka/eureka/GNSS Algorithm/SPP/cmake-build-debug-coverage/CMakeFiles/SPP.dir/azel.c.gcda
        -:    0:Runs:1
        -:    1:#include "SatPos.h"
        -:    2:
        -:    3:/* inner product ---------------------------------------------------------------
        -:    4:* inner product of vectors
        -:    5:* args   : double *a,*b     I   vector a,b (n x 1)
        -:    6:*          int    n         I   size of vector a,b
        -:    7:* return : a'*b
        -:    8:*-----------------------------------------------------------------------------*/
    #####:    9:extern double dot(const double *a, const double *b, int n) {
    #####:   10:    double c = 0.0;
        -:   11:
    #####:   12:    while (--n >= 0)
    %%%%%:   12-block  0
    %%%%%:   12-block  1
    #####:   13:        c += a[n] * b[n];
    %%%%%:   13-block  0
        -:   14:
    #####:   15:    return c;
    %%%%%:   15-block  0
        -:   16:}
        -:   17:
        -:   18:/* transform ecef to geodetic postion ------------------------------------------
        -:   19:* transform ecef position to geodetic position
        -:   20:* args   : double *r        I   ecef position {x,y,z} (m)
        -:   21:*          double *pos      O   geodetic position {lat,lon,h} (rad,m)
        -:   22:* return : none
        -:   23:* notes  : WGS84, ellipsoidal height
        -:   24:*-----------------------------------------------------------------------------*/
       18:   25:extern void ecef2pos(Coord *r, double *pos) {
       18:   26:    double e2 = FE_WGS84 * (2.0 - FE_WGS84);
       18:   27:    double r2 = r->X * r->X + r->Y * r->Y ; //+ r->Z * r->Z;
       18:   28:    double z, zk, v = RE_WGS84, sinp;
      108:   29:    for (z = r->Z, zk = 0.0; fabs(z - zk) >= 1E-4;) {
       18:   29-block  0
      108:   29-block  1
       90:   30:        zk = z;
       90:   31:        sinp = z / sqrt(r2 + z * z);
       90:   32:        v = RE_WGS84 / sqrt(1.0 - e2 * sinp * sinp);
       90:   33:        z = r->Z + v * e2 * sinp;
       90:   33-block  0
        -:   34:    }
      18*:   35:    pos[0] = r2 > 1E-12 ? atan(z / sqrt(r2)) : (r->Z > 0.0 ? PI / 2.0 : -PI / 2.0);
       18:   35-block  0
       18:   35-block  1
    %%%%%:   35-block  2
    %%%%%:   35-block  3
    %%%%%:   35-block  4
    %%%%%:   35-block  5
      18*:   36:    pos[1] = r2 > 1E-12 ? atan2(r->Y, r->X) : 0.0;
       18:   36-block  0
       18:   36-block  1
    %%%%%:   36-block  2
       18:   37:    pos[2] = sqrt(r2 + z * z) - v;
       18:   38:}
        -:   39:
        9:   40:extern void rot_enu2xyz(double lat, double lon, double *rotmat) {
        -:   41:    double coslat, sinlat, coslon, sinlon;
        9:   42:    coslat = cos(lat - PI / 2);
        9:   43:    sinlat = sin(lat - PI / 2);
        9:   44:    coslon = cos(-PI / 2 - lon);
        9:   45:    sinlon = sin(-PI / 2 - lon);
        -:   46:
        9:   47:    rotmat[0] = coslon;
        9:   48:    rotmat[1] = -sinlon;
        9:   49:    rotmat[2] = 0;
        -:   50:
        9:   51:    rotmat[3] = sinlon * coslat;
        9:   52:    rotmat[4] = coslon * coslat;
        9:   53:    rotmat[5] = -sinlat;
        -:   54:
        9:   55:    rotmat[6] = sinlon * sinlat;
        9:   56:    rotmat[7] = coslon * sinlat;
        9:   57:    rotmat[8] = coslat;
        9:   58:}
        -:   59:
        9:   60:void matmul(const char *tr, int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta,
        -:   61:            double *c, int ldc) {
        -:   62:    double d;
        -:   63:    int i, j, x;
       9*:   64:    int opr = tr[0] == 'N' ? (tr[1] == 'N' ? 1 : 2) : (tr[1] == 'N' ? 3 : 4);
        9:   64-block  0
        9:   64-block  1
        9:   64-block  2
    %%%%%:   64-block  3
        9:   64-block  4
    %%%%%:   64-block  5
    %%%%%:   64-block  6
    %%%%%:   64-block  7
    %%%%%:   64-block  8
       18:   65:    for (i = 0; i < m; i++) {
        9:   65-block  0
        9:   65-block  1
       18:   65-block  2
       36:   66:        for (j = 0; j < n; j++) {
        9:   66-block  0
       36:   66-block  1
       27:   67:            d = 0;
       27:   68:            switch (opr) {
       27:   68-block  0
       27:   69:                case 1:
      108:   70:                    for (x = 0; x < k; x++)
       27:   70-block  0
      108:   70-block  1
       81:   71:                        d += a[lda * x + i] * b[ldb * j + x];
       81:   71-block  0
       27:   72:                    break;
       27:   72-block  0
    #####:   73:                case 2:
    #####:   74:                    for (x = 0; x < k; x++)
    %%%%%:   74-block  0
    %%%%%:   74-block  1
    #####:   75:                        d += a[lda * x + i] * b[ldb * x + j];
    %%%%%:   75-block  0
    #####:   76:                    break;
    %%%%%:   76-block  0
    #####:   77:                case 3:
    #####:   78:                    for (x = 0; x < k; x++)
    %%%%%:   78-block  0
    %%%%%:   78-block  1
    #####:   79:                        d += a[lda * i + x] * b[ldb * j + x];
    %%%%%:   79-block  0
    #####:   80:                    break;
    %%%%%:   80-block  0
    #####:   81:                case 4:
    #####:   82:                    for (x = 0; x < k; x++)
    %%%%%:   82-block  0
    %%%%%:   82-block  1
    #####:   83:                        d += a[lda * i + x] * b[ldb * x + j];
    %%%%%:   83-block  0
    #####:   84:                    break;
    %%%%%:   84-block  0
        -:   85:            }
       27:   86:            c[ldc * j + i] = alpha * d + beta * c[ldc * j + i];
       27:   86-block  0
        -:   87:        }
        -:   88:    }
        9:   89:}
        -:   90:
        9:   91:void elevazel(Coord *sat, Coord *rec, double *azel) {
        -:   92:    double r[3], rot_l2f[9], dump[3], pos[3];
        9:   93:    ecef2pos(rec, pos);
        9:   93-block  0
        9:   94:    rot_enu2xyz(pos[0], pos[1], rot_l2f);
        9:   95:    r[0] = sat->X - rec->X;
        9:   96:    r[1] = sat->Y - rec->Y;
        9:   97:    r[2] = sat->Z - rec->Z;
        9:   98:    matmul("NN", 1, 3, 3, 1.0, r, 1, rot_l2f, 3, 0.0, dump, 1);
        9:   99:    azel[0] = atan2(dump[0], dump[1]);
        9:  100:    azel[1] = atan(dump[2] / sqrt(dump[0] * dump[0] + dump[1] * dump[1]));
        9:  101:}
