        -:    0:Source:/media/eureka/eureka/GNSS Algorithm/SPP/CMat.c
        -:    0:Graph:/media/eureka/eureka/GNSS Algorithm/SPP/cmake-build-debug-coverage/CMakeFiles/SPP.dir/CMat.c.gcno
        -:    0:Data:/media/eureka/eureka/GNSS Algorithm/SPP/cmake-build-debug-coverage/CMakeFiles/SPP.dir/CMat.c.gcda
        -:    0:Runs:1
        -:    1:#include <math.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include "CMat.h"
        -:    5:
        -:    6:
       51:    7:double *mat(int n, int m) {
       51:    8:    double *p = NULL;
       51:    9:    if (m < 0 || n < 0) {
       51:    9-block  0
       51:    9-block  1
    #####:   10:        printf("***ERROR(mat):cant be zero!\n");
    %%%%%:   10-block  0
    #####:   11:        return NULL;
        -:   12:    }
       51:   13:    p = (double *) malloc(m * n * sizeof(double));
       51:   14:    if (!p) {
       51:   14-block  0
    #####:   15:        printf("***ERROR(mat):allocate error!\n");
    %%%%%:   15-block  0
    #####:   16:        return NULL;
        -:   17:    }
       51:   18:    memset(p, 0, sizeof(double) * m * n);
     1038:   19:    for (int i = 0; i < m * n - 1; i++)
       51:   19-block  0
     1038:   19-block  1
      987:   20:        p[i] = 0;
      987:   20-block  0
       51:   21:    return p;
       51:   21-block  0
        -:   22:}
        -:   23:
        6:   24:static int *imat(int n, int m) {
        6:   25:    int *p = NULL;
        6:   26:    if (m < 0 || n < 0) {
        6:   26-block  0
        6:   26-block  1
    #####:   27:        printf("***ERROR(mat):cant be zero!\n");
    %%%%%:   27-block  0
    #####:   28:        return NULL;
        -:   29:    }
        6:   30:    p = (int *) malloc(m * n * sizeof(int));
        6:   31:    if (!p) {
        6:   31-block  0
    #####:   32:        printf("***ERROR(mat):allocate error!\n");
    %%%%%:   32-block  0
    #####:   33:        return NULL;
        -:   34:    }
        6:   35:    memset(p, 0, sizeof(int) * m * n);
       24:   36:    for (int i = 0; i < m * n - 1; i++)
        6:   36-block  0
       24:   36-block  1
       18:   37:        p[i] = 0;
       18:   37-block  0
        6:   38:    return p;
        6:   38-block  0
        -:   39:}
        -:   40:
        6:   41:int ludcmp(double *A, int n, int *indx, double *d) {
        6:   42:    double big, s, tmp, *vv = mat(n, 1);
        6:   42-block  0
        6:   43:    int i, imax = 0, j, k;
        6:   44:    *d = 1.0;
       30:   45:    for (i = 0; i < n; i++) {
       24:   45-block  0
       30:   45-block  1
       24:   46:        big = 0.0;
      120:   47:        for (j = 0; j < n; j++)
       24:   47-block  0
       96:   47-block  1
      120:   47-block  2
       96:   48:            if ((tmp = fabs(A[i + j * n])) > big)
       96:   48-block  0
       73:   49:                big = tmp;
       73:   49-block  0
       24:   50:        if (big > 0.0)
       24:   50-block  0
       24:   51:            vv[i] = 1.0 / big;
       24:   51-block  0
        -:   52:        else {
    #####:   53:            free(vv);
    #####:   54:            return -1;
    %%%%%:   54-block  0
        -:   55:        }
        -:   56:    }
       30:   57:    for (j = 0; j < n; j++) {
        6:   57-block  0
       24:   57-block  1
       30:   57-block  2
       60:   58:        for (i = 0; i < j; i++) {
       24:   58-block  0
       60:   58-block  1
       36:   59:            s = A[i + j * n];
       60:   60:            for (k = 0; k < i; k++)
       36:   60-block  0
       60:   60-block  1
       24:   61:                s -= A[i + k * n] * A[k + j * n];
       24:   61-block  0
       36:   62:            A[i + j * n] = s;
       36:   62-block  0
        -:   63:        }
       24:   64:        big = 0.0;
       84:   65:        for (i = j; i < n; i++) {
       24:   65-block  0
       60:   65-block  1
       84:   65-block  2
       60:   66:            s = A[i + j * n];
      120:   67:            for (k = 0; k < j; k++)
       60:   67-block  0
      120:   67-block  1
       60:   68:                s -= A[i + k * n] * A[k + j * n];
       60:   68-block  0
       60:   69:            A[i + j * n] = s;
       60:   70:            if ((tmp = vv[i] * fabs(s)) >= big) {
       60:   70-block  0
       24:   71:                big = tmp;
       24:   72:                imax = i;
       24:   72-block  0
        -:   73:            }
        -:   74:        }
       24:   75:        if (j != imax) {
       24:   75-block  0
    #####:   76:            for (k = 0; k < n; k++) {
    %%%%%:   76-block  0
    %%%%%:   76-block  1
    #####:   77:                tmp = A[imax + k * n];
    #####:   78:                A[imax + k * n] = A[j + k * n];
    #####:   79:                A[j + k * n] = tmp;
    %%%%%:   79-block  0
        -:   80:            }
    #####:   81:            *d = -(*d);
    #####:   82:            vv[imax] = vv[j];
    %%%%%:   82-block  0
        -:   83:        }
       24:   84:        indx[j] = imax;
       24:   85:        if (A[j + j * n] == 0.0) {
       24:   85-block  0
    #####:   86:            free(vv);
    #####:   87:            return -1;
    %%%%%:   87-block  0
        -:   88:        }
       24:   89:        if (j != n - 1) {
       24:   89-block  0
       18:   90:            tmp = 1.0 / A[j + j * n];
       54:   91:            for (i = j + 1; i < n; i++)
       18:   91-block  0
       54:   91-block  1
       36:   92:                A[i + j * n] *= tmp;
       36:   92-block  0
        -:   93:        }
        -:   94:    }
        6:   95:    free(vv);
        6:   96:    return 0;
        6:   96-block  0
        -:   97:}
        -:   98:
       24:   99:void lubksb(const double *A, int n, const int *indx, double *b) {
        -:  100:    double s;
       24:  101:    int i, ii = -1, ip, j;
      120:  102:    for (i = 0; i < n; i++) {
       24:  102-block  0
      120:  102-block  1
       96:  103:        ip = indx[i];
       96:  104:        s = b[ip];
       96:  105:        b[ip] = b[i];
       96:  106:        if (ii >= 0)
       96:  106-block  0
       96:  107:            for (j = ii; j < i; j++)
       36:  107-block  0
       96:  107-block  1
       60:  108:                s -= A[i + j * n] * b[j];
       60:  108-block  0
       60:  109:        else if (s)
       60:  109-block  0
       24:  110:            ii = i;
       24:  110-block  0
       96:  111:        b[i] = s;
       96:  111-block  0
        -:  112:    }
      120:  113:    for (i = n - 1; i >= 0; i--) {
       24:  113-block  0
      120:  113-block  1
       96:  114:        s = b[i];
      240:  115:        for (j = i + 1; j < n; j++)
       96:  115-block  0
      240:  115-block  1
      144:  116:            s -= A[i + j * n] * b[j];
      144:  116-block  0
       96:  117:        b[i] = s / A[i + i * n];
       96:  117-block  0
        -:  118:    }
       24:  119:}
        -:  120:
        6:  121:int CMat_Inverse(double *A, int lda, int n) {
        -:  122:    double d, *B;
        -:  123:    int i, j, *indx;
        6:  124:    indx = imat(n, 1);
        6:  124-block  0
        6:  125:    B = mat(n, n);
       30:  126:    for (i = 0; i < n; i++)
       30:  126-block  0
       24:  127:        memcpy(B + n * i, A + lda * i, sizeof(double) * n);
       24:  127-block  0
        6:  128:    if (ludcmp(B, n, indx, &d)) {
        6:  128-block  0
    #####:  129:        free(indx);
    #####:  130:        free(B);
    #####:  131:        return -1;
    %%%%%:  131-block  0
        -:  132:    }
       30:  133:    for (j = 0; j < n; j++) {
        6:  133-block  0
       30:  133-block  1
      120:  134:        for (i = 0; i < n; i++) A[i + j * lda] = 0.0;
       24:  134-block  0
       96:  134-block  1
      120:  134-block  2
       24:  135:        A[j + j * lda] = 1.0;
       24:  136:        lubksb(B, n, indx, A + j * lda);
       24:  136-block  0
        -:  137:    }
        6:  138:    free(indx);
        6:  139:    free(B);
        6:  140:    return 1;
        6:  140-block  0
        -:  141:}
        -:  142:
       24:  143:void CMat_Matmul(const char *tr, int m, int n, int k, double alpha, double *a, double *b, double beta, double *c) {
        -:  144://tr="NN"void CMat_Matmul(const char *tr, int m, int n, int k, double alpha, double *a, double *b,  double beta,
        -:  145://                 double *c)
        -:  146://m, nres
        -:  147://k left col
        -:  148://alpha 1.0
        -:  149://lda a row
        -:  150://ldb b row
        -:  151://beta 0
        -:  152://c res
       24:  153:    int lda = m;
       24:  154:    int ldb = k;
       24:  155:    int ldc = m;
        -:  156:    double d;
        -:  157:    int i, j, x;
      24*:  158:    int opr = tr[0] == 'N' ? (tr[1] == 'N' ? 1 : 2) : (tr[1] == 'N' ? 3 : 4);
       24:  158-block  0
       24:  158-block  1
       24:  158-block  2
    %%%%%:  158-block  3
       24:  158-block  4
    %%%%%:  158-block  5
    %%%%%:  158-block  6
    %%%%%:  158-block  7
    %%%%%:  158-block  8
      120:  159:    for (i = 0;i < m;i++) {
       24:  159-block  0
       96:  159-block  1
      120:  159-block  2
      456:  160:        for (j = 0;j < n;j++) {
       96:  160-block  0
      456:  160-block  1
      360:  161:            d = 0;
      360:  162:            switch (opr) {
      360:  162-block  0
      360:  163:                case 1:
     3480:  164:                    for (x = 0;x < k;x++)
      360:  164-block  0
     3480:  164-block  1
     3120:  165:                        d += a[lda * x+ i] * b[ldb * j+ x];
     3120:  165-block  0
      360:  166:                    break;
      360:  166-block  0
    #####:  167:                case 2:
    #####:  168:                    for (x = 0;x < k;x++)
    %%%%%:  168-block  0
    %%%%%:  168-block  1
    #####:  169:                        d += a[lda * x+ i] * b[ldb * x+ j];
    %%%%%:  169-block  0
    #####:  170:                    break;
    %%%%%:  170-block  0
    #####:  171:                case 3:
    #####:  172:                    for (x = 0;x < k;x++)
    %%%%%:  172-block  0
    %%%%%:  172-block  1
    #####:  173:                        d += a[lda * i+ x] * b[ldb * j+ x];
    %%%%%:  173-block  0
    #####:  174:                    break;
    %%%%%:  174-block  0
    #####:  175:                case 4:
    #####:  176:                    for (x = 0;x < k;x++)
    %%%%%:  176-block  0
    %%%%%:  176-block  1
    #####:  177:                        d += a[lda * i+ x] * b[ldb * x+ j];
    %%%%%:  177-block  0
    #####:  178:                    break;
    %%%%%:  178-block  0
        -:  179:            }
      360:  180:            c[ldc * j+ i] =alpha * d+beta * c[ldc * j + i];
      360:  180-block  0
        -:  181:        }
        -:  182:    }
       24:  183:}
        -:  184:
        -:  185:
        -:  186:
    #####:  187:void CMat_Multiply(double *left, double *right, double *res, int row, int mid, int col)
        -:  188:{
        -:  189:    int i, j, k;
    #####:  190:    for (i = 0; i < row; i++)
    %%%%%:  190-block  0
    %%%%%:  190-block  1
    %%%%%:  190-block  2
    #####:  191:        for (j = 0; j < col; j++)
    %%%%%:  191-block  0
    %%%%%:  191-block  1
    %%%%%:  191-block  2
        -:  192:        {
    #####:  193:            res[i+j*row] = 0.0;
    #####:  194:            for (k = 0; k < mid; k++)
    %%%%%:  194-block  0
    %%%%%:  194-block  1
    %%%%%:  194-block  2
        -:  195:            {
    #####:  196:                if (left[i+k*row] != 0 && right[k+j*mid] != 0)
    %%%%%:  196-block  0
    %%%%%:  196-block  1
    #####:  197:                    res[i+j*row] += left[i+k*row] * right[k+j*mid];
    %%%%%:  197-block  0
        -:  198:            }
        -:  199:        }
    #####:  200:}
        -:  201:
        -:  202:
    #####:  203:void CMat_PrintMatrix(double *mat, int row, int col, const char *premsg) {
    #####:  204:    if (row < 0 || col < 0) {
    %%%%%:  204-block  0
    %%%%%:  204-block  1
    #####:  205:        printf("***print_matrix wrong input arguments for the row and col ***\n");
    %%%%%:  205-block  0
    #####:  206:        return;
        -:  207:    }
        -:  208:    int i, j;
    #####:  209:    if (strlen(premsg) != 0) {
    %%%%%:  209-block  0
    #####:  210:        printf("%s\n", premsg);
    %%%%%:  210-block  0
        -:  211:    }
    #####:  212:    for (i = 0; i < row; i++) {
    %%%%%:  212-block  0
    %%%%%:  212-block  1
    #####:  213:        for (j = 0; j < col; j++) {
    %%%%%:  213-block  0
    %%%%%:  213-block  1
    #####:  214:            printf("%13.7lf ", mat[i + j * row]);
    %%%%%:  214-block  0
        -:  215:        }
    #####:  216:        printf("\n");
    %%%%%:  216-block  0
        -:  217:    }
        -:  218:}
        -:  219:
        6:  220:void CMat_Transpose(double *A, int row, int col) {
        6:  221:    double *ACopy = mat(row, col);
        6:  221-block  0
        6:  222:    CMat_Copy(ACopy, A, col, row);
       60:  223:    for (int i = 0; i < row; i++) {
       54:  223-block  0
       60:  223-block  1
      270:  224:        for (int j = 0; j < col; j++) {
       54:  224-block  0
      270:  224-block  1
      216:  225:            A[j + i * col] = ACopy[i + j * row];
      216:  225-block  0
        -:  226:        }
        -:  227:    }
        6:  228:}
        -:  229:
        -:  230:
    #####:  231:void demo() {
        -:  232:    // matrix is column major
    #####:  233:    double norm[3 * 3] = {1, 2, 3, 6, 3, 5, 4, 8, 9};
    #####:  234:    double A[3] = {4, 5, 6}, L[3];
    #####:  235:    CMat_Matmul("NN", 3, 1, 3, 1.0, norm, A, 0.0, L);
    %%%%%:  235-block  0
    #####:  236:    printf("norm(3*3) * A(3*1) = L(3*1)\n");
    #####:  237:    CMat_PrintMatrix(norm, 3, 3, "norm");
    #####:  238:    CMat_PrintMatrix(A, 3, 1, "A");
    #####:  239:    CMat_PrintMatrix(L, 3, 1, "L");
        -:  240:
        -:  241:    double normCopy[3 * 3];
    #####:  242:    CMat_Copy(&normCopy, &norm, 3, 3);
        -:  243:
    #####:  244:    CMat_Inverse(norm, 3, 3);
    #####:  245:    printf("inverse of norm(3*3) is :\n");
    #####:  246:    CMat_PrintMatrix(norm, 3, 3, "norm");
    #####:  247:    CMat_Transpose(norm, 3, 3);
    #####:  248:    CMat_PrintMatrix(normCopy, 3, 3, "T");
    #####:  249:}
        -:  250:
       12:  251:void CMat_Copy(double *des, double *src, int col, int row) {
       12:  252:    int len = col * row;
      444:  253:    for (int i = 0; i < len; ++i) {
       12:  253-block  0
      444:  253-block  1
      432:  254:        des[i] = src[i];
      432:  254-block  0
        -:  255:    }
       12:  256:}
        -:  257:
        -:  258:
        6:  259:double Mat_Norm(double *A, int len) {
        6:  260:    double res = 0.0;
       30:  261:    for (int i = 0; i < len; i++)
        6:  261-block  0
       30:  261-block  1
       24:  262:        res += A[i] * A[i];
       24:  262-block  0
        6:  263:    return sqrt(res);
        6:  263-block  0
        -:  264:}
        -:  265:
        6:  266:void Mat_Add(double *A, double *B, int row, int col) {
        6:  267:    int len = row * col;
       30:  268:    for (int i = 0; i < len; i++) {
        6:  268-block  0
       30:  268-block  1
       24:  269:        A[i] += B[i];
       24:  269-block  0
        -:  270:    }
        6:  271:}
        -:  272:
        -:  273:
        -:  274:
