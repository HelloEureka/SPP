        -:    0:Source:/media/eureka/eureka/GNSS Algorithm/SPP/trop.c
        -:    0:Graph:/media/eureka/eureka/GNSS Algorithm/SPP/cmake-build-debug-coverage/CMakeFiles/SPP.dir/trop.c.gcno
        -:    0:Data:/media/eureka/eureka/GNSS Algorithm/SPP/cmake-build-debug-coverage/CMakeFiles/SPP.dir/trop.c.gcda
        -:    0:Runs:1
        -:    1:#include "global.h"
        -:    2:#include <math.h>
        -:    3:/* troposphere model -----------------------------------------------------------
        -:    4:* compute tropospheric delay by standard atmosphere and saastamoinen model
        -:    5:* args   : gtime_t time     I   time
        -:    6:*          double *pos      I   receiver position {lat,lon,h} (rad,m)
        -:    7:*          double *azel     I   azimuth/elevation angle {az,el} (rad)
        -:    8:*          double humi      I   relative humidity
        -:    9:* return : tropospheric delay (m)
        -:   10:*-----------------------------------------------------------------------------*/
        9:   11:double tropmodel(gtime_t time, const double *pos, const double *azel,
        -:   12:                        double humi)
        -:   13:{
        9:   14:    const double temp0=15.0; /* temparature at sea level */
        -:   15:    double hgt,pres,temp,e,z,trph,trpw;
        -:   16:    
       9*:   17:    if (pos[2]<-100.0||1E4<pos[2]||azel[1]<=0) return 0.0;
        9:   17-block  0
        9:   17-block  1
        9:   17-block  2
    %%%%%:   17-block  3
        -:   18:    
        -:   19:    /* standard atmosphere */
       9*:   20:    hgt=pos[2]<0.0?0.0:pos[2];
        9:   20-block  0
    %%%%%:   20-block  1
        9:   20-block  2
        -:   21:    
        9:   22:    pres=1013.25*pow(1.0-2.2557E-5*hgt,5.2568);
        9:   23:    temp=temp0-6.5E-3*hgt+273.16;
        9:   24:    e=6.108*humi*exp((17.15*temp-4684.0)/(temp-38.45));
        -:   25:    
        -:   26:    /* saastamoninen model */
        9:   27:    z=PI/2.0-azel[1];
        9:   28:    trph=0.0022768*pres/(1.0-0.00266*cos(2.0*pos[0])-0.00028*hgt/1E3)/cos(z);
        9:   29:    trpw=0.002277*(1255.0/temp+0.05)*e/cos(z);
        9:   30:    return trph+trpw;
        9:   30-block  0
        -:   31:}
