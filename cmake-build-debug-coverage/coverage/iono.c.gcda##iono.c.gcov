        -:    0:Source:/media/eureka/eureka/GNSS Algorithm/SPP/iono.c
        -:    0:Graph:/media/eureka/eureka/GNSS Algorithm/SPP/cmake-build-debug-coverage/CMakeFiles/SPP.dir/iono.c.gcno
        -:    0:Data:/media/eureka/eureka/GNSS Algorithm/SPP/cmake-build-debug-coverage/CMakeFiles/SPP.dir/iono.c.gcda
        -:    0:Runs:1
        -:    1:#include "global.h"
        -:    2:#include <math.h>
        -:    3:#include "SatPos.h"
        -:    4:/* ionosphere model ------------------------------------------------------------
        -:    5:* compute ionospheric delay by broadcast ionosphere model (klobuchar model)
        -:    6:* args   : gtime_t t        I   time (gpst)
        -:    7:*          double *ion      I   iono model parameters {a0,a1,a2,a3,b0,b1,b2,b3}
        -:    8:*          double *pos      I   receiver position {lat,lon,h} (rad,m)
        -:    9:*          double *azel     I   azimuth/elevation angle {az,el} (rad)
        -:   10:* return : ionospheric delay (L1) (m)
        -:   11:*-----------------------------------------------------------------------------*/
        -:   12:
        -:   13:/*euclid norm*/
        9:   14:double norm(const double *a,int n)
        -:   15:{
        9:   16:    double res=0;
       81:   17:    for (int i = 0; i < n; i++) {
        9:   17-block  0
       81:   17-block  1
       72:   18:        res+=a[i]*a[i];
       72:   18-block  0
        -:   19:    }
        9:   20:    return sqrt(res);
        9:   20-block  0
        -:   21:}
        -:   22:
        -:   23:
        9:   24:double ionmodel(gtime_t t, const double *ion, const double *pos, const double *azel)
        -:   25:{
        9:   26:    const double ion_default[]={ /* 2004/1/1 */
        -:   27:        0.1118E-07,-0.7451E-08,-0.5961E-07, 0.1192E-06,
        -:   28:        0.1167E+06,-0.2294E+06,-0.1311E+06, 0.1049E+07
        -:   29:    };
        -:   30:    double tt,f,psi,phi,lam,amp,per,x;
        -:   31:    int week;
        -:   32:    
       9*:   33:    if (pos[2]<-1E3||azel[1]<=0) return 0.0;
        9:   33-block  0
        9:   33-block  1
    %%%%%:   33-block  2
       9*:   34:    if (norm(ion,8)<=0.0) ion=ion_default;
        9:   34-block  0
    %%%%%:   34-block  1
        -:   35:    
        -:   36:    /* earth centered angle (semi-circle) */
        9:   37:    psi=0.0137/(azel[1]/PI+0.11)-0.022;
        -:   38:    
        -:   39:    /* subionospheric latitude/longitude (semi-circle) */
        9:   40:    phi=pos[0]/PI+psi*cos(azel[0]);
       9*:   41:    if      (phi> 0.416) phi= 0.416;
        9:   41-block  0
    %%%%%:   41-block  1
       9*:   42:    else if (phi<-0.416) phi=-0.416;
        9:   42-block  0
    %%%%%:   42-block  1
        9:   43:    lam=pos[1]/PI+psi*sin(azel[0])/cos(phi*PI);
        -:   44:    
        -:   45:    /* geomagnetic latitude (semi-circle) */
        9:   46:    phi+=0.064*cos((lam-1.617)*PI);
        -:   47:
        -:   48:    /* local time (s) */
        9:   49:    double a = time2gpst(t, &week);
        9:   49-block  0
        9:   50:    tt=43200.0*lam + time2gpst(t, &week);
        9:   51:    tt-=floor(tt/86400.0)*86400.0; /* 0<=tt<86400 */
        -:   52:    
        -:   53:    /* slant factor */
        9:   54:    f=1.0+16.0*pow(0.53-azel[1]/PI,3.0);
        -:   55:    
        -:   56:    /* ionospheric delay */
        9:   57:    amp=ion[0]+phi*(ion[1]+phi*(ion[2]+phi*ion[3]));
        9:   58:    per=ion[4]+phi*(ion[5]+phi*(ion[6]+phi*ion[7]));
       9*:   59:    amp=amp<    0.0?    0.0:amp;
    %%%%%:   59-block  0
        9:   59-block  1
       9*:   60:    per=per<72000.0?72000.0:per;
        9:   60-block  0
    %%%%%:   60-block  1
        9:   60-block  2
        9:   61:    x=2.0*PI*(tt-50400.0)/per;
        -:   62:    
       9*:   63:    return CLIGHT*f*(fabs(x)<1.57?5E-9+amp*(1.0+x*x*(-0.5+x*x/24.0)):5E-9);
        9:   63-block  0
        9:   63-block  1
    %%%%%:   63-block  2
        9:   63-block  3
        -:   64:}
